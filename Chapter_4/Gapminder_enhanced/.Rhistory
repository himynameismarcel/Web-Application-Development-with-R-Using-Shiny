filter(!is.na(id)) %>%
distinct(id, .keep_all = TRUE)
dfcolor <- map_df(na.omit(unique(c(dftype$type_1, dftype$type_2))), function(t){
# t <- "bug"
col <- "http://pokemon-uranium.wikia.com/wiki/Template:%s_color" %>%
sprintf(t) %>%
read_html() %>%
html_nodes("span > b") %>%
html_text()
data_frame(type = t, color = paste0("#", col))
})
dfcolorf <- expand.grid(color_1 = dfcolor$color, color_2 = dfcolor$color,
stringsAsFactors = FALSE) %>%
tbl_df() %>%
group_by(color_1, color_2) %>%
do({
n = 100;p = 0.25
data_frame(color_f = colorRampPalette(c(.$color_1, .$color_2))(n)[round(n*p)])
})
# THE join
df <- dfpkmn %>%
left_join(dftype, by = "id") %>%
left_join(dfstat, by = "id") %>%
left_join(dfcolor %>% rename(type_1 = type, color_1 = color), by = "type_1") %>%
left_join(dfcolor %>% rename(type_2 = type, color_2 = color), by = "type_2") %>%
left_join(dfcolorf, by =  c("color_1", "color_2")) %>%
left_join(dfegg, by = "species_id") %>%
left_join(dfimg, by = "id") %>%
left_join(dficon, by = "id")
#rm(dftype, dfstat, dfcolor, dfcolorf, dfegg, dfimg, dficon)
#rm(id, url_bulbapedia
df <- df %>%
mutate(color_f = ifelse(is.na(color_f), color_1, color_f)) %>%
filter(!is.na(url_image))
head(df)
dstype <- df %>%
count(type_1, color_1) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(x = row_number()) %>%
rename(name = type_1,
color = color_1,
y = n) %>%
select(y, name, color) %>%
list.parse3()
hcbar <- highchart() %>%
hc_xAxis(categories = unlist(pluck(dstype, i = 2))) %>%
hc_yAxis(title = NULL) %>%
hc_add_series(data = dstype, type = "bar", showInLegend = FALSE,
name = "Number of species")
hcbar
set.seed(3514)
tm <- df %>%
mutate(type_2 = ifelse(is.na(type_2), paste("only", type_1), type_2),
type_1 = type_1) %>%
group_by(type_1, type_2) %>%
summarise(n = n()) %>%
ungroup() %>%
treemap::treemap(index = c("type_1", "type_2"),
vSize = "n", vColor = "type_1")
tm$tm <- tm$tm %>%
tbl_df() %>%
left_join(df %>% select(type_1, type_2, color_f) %>% distinct(), by = c("type_1", "type_2")) %>%
left_join(df %>% select(type_1, color_1) %>% distinct(), by = c("type_1")) %>%
mutate(type_1 = paste0("Main ", type_1),
color = ifelse(is.na(color_f), color_1, color_f))
hctm <- highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified")
hctm
set.seed(13242)
tsne_poke <- df %>%
select(type_1, type_2, weight, height, base_experience,
attack, defense, special_attack, special_defense, speed, base_experience,
hp, egg_group_1, egg_group_2) %>%
map(function(x){
ifelse(is.na(x), "NA", x)
}) %>%
as.data.frame() %>%
tbl_df() %>%
model.matrix(~., data = .) %>%
as.data.frame() %>%
tbl_df() %>%
.[-1] %>%
tsne(perplexity = 60)
df <- df %>%
mutate(x = tsne_poke[, 1],
y = tsne_poke[, 2])
dfcenters <- df %>%
group_by(type_1, color_1) %>%
summarise(cx = mean(x),
cy = mean(y),
sdcx = sd(x),
sdcy = sd(y))
cols <- df %>% select(type_1, color_1) %>% distinct() %>% {  setNames(.$color_1, .$type_1) }
gg <- ggplot(df) +
geom_point(aes(x, y, color = type_1), size = 4, alpha = 0.5) +
scale_color_manual("Type", values = cols) +
geom_text(data = dfcenters, aes(cx, cy, label = type_1)) +
theme_minimal() +
theme(legend.position = "right") +
facet_wrap(~type_1)
gg
# Clearly he algorithm grouped pokemon according to their main type.
# Every group looks relative concentrated except the dragon, fairy, poison, and
# steel. JbKunst thinkgs that this can be because these types of pokemon have a
# second variable so they are not so similar among them.
# There will be more in this result?
# Now it is time to put all the downloaded images in a chart and explore the
# output.
ds <- df %>%
select(pokemon, type_1, type_2, weight, height,
attack, defense, special_attack, special_defense,
url_image, url_icon, color = color_1, x, y) %>%
list.parse3() %>%
map(function(x){
x$marker$radius <- 2
x
x$url_icon  <- NULL
x$marker$symbol <- sprintf("url(%s)", x$url_icon)
})
ds2 <- df %>%
select(color = color_1, x, y) %>%
mutate(color = hex_to_rgba(color, 0.05)) %>%
list.parse3()
urlimage <- "https://raw.githubusercontent.com/phalt/pokeapi/master/data/Pokemon_XY_Sprites/"
tooltip <- c("pokemon", "type_1", "type_2",
"weight", "height",
"attack",  "defense",
"special_attack", "special_defense") %>%
map(function(x){
tags$tr(
tags$th(str_replace_all(str_to_title(x), "_", " ")),
tags$td(paste0("{point.", x, "}"))
)
}) %>%
do.call(tagList, .) %>%
tagList(
tags$img(src = paste0(urlimage, "{point.url_image}"),
width = "125px", height = "125px")
) %>%
as.character()
hctsne <- highchart() %>%
hc_chart(zoomType = "xy") %>%
hc_xAxis(minRange = diff(range(df$x))/5) %>%
hc_yAxis(minRange = diff(range(df$y))/5) %>%
hc_add_series(data = ds,
type = "scatter",
name = "pokemons",
states = list(hover = list(halo = list(
size  = 50,
attributes = list(
opacity = 1)
)))) %>%
hc_add_series(data = ds2, type = "scatter",
marker = list(radius = 75, symbol = "circle"),
zIndex = -3,  enableMouseTracking = FALSE,
linkedTo = ":previous") %>%
hc_plotOptions(series = list()) %>%
hc_tooltip(
useHTML = TRUE,
borderRadius = 0,
borderWidth = 5,
headerFormat = "<table>",
pointFormat = tooltip,
footerFormat = "</table>"
) %>%
hc_add_theme(
hc_theme_null(
chart = list(
backgroundColor = "transparent",
style = list(
fontFamily = "Roboto"
)
)
)
)
hctsne
ds <- df %>%
select(pokemon, type_1, type_2, weight, height,
attack, defense, special_attack, special_defense,
url_image, url_icon, color = color_1, x, y) %>%
list.parse3() %>%
map(function(x){
x$marker$symbol <- sprintf("url(%s)", x$url_icon)
x$marker$radius <- 2
x$url_icon  <- NULL
x
})
ds2 <- df %>%
select(color = color_1, x, y) %>%
mutate(color = hex_to_rgba(color, 0.05)) %>%
list.parse3()
urlimage <- "https://raw.githubusercontent.com/phalt/pokeapi/master/data/Pokemon_XY_Sprites/"
tooltip <- c("pokemon", "type_1", "type_2",
"weight", "height",
"attack",  "defense",
"special_attack", "special_defense") %>%
map(function(x){
tags$tr(
tags$th(str_replace_all(str_to_title(x), "_", " ")),
tags$td(paste0("{point.", x, "}"))
)
}) %>%
do.call(tagList, .) %>%
tagList(
tags$img(src = paste0(urlimage, "{point.url_image}"),
width = "125px", height = "125px")
) %>%
as.character()
hctsne <- highchart() %>%
hc_chart(zoomType = "xy") %>%
hc_xAxis(minRange = diff(range(df$x))/5) %>%
hc_yAxis(minRange = diff(range(df$y))/5) %>%
hc_add_series(data = ds,
type = "scatter",
name = "pokemons",
states = list(hover = list(halo = list(
size  = 50,
attributes = list(
opacity = 1)
)))) %>%
hc_add_series(data = ds2, type = "scatter",
marker = list(radius = 75, symbol = "circle"),
zIndex = -3,  enableMouseTracking = FALSE,
linkedTo = ":previous") %>%
hc_plotOptions(series = list()) %>%
hc_tooltip(
useHTML = TRUE,
borderRadius = 0,
borderWidth = 5,
headerFormat = "<table>",
pointFormat = tooltip,
footerFormat = "</table>"
) %>%
hc_add_theme(
hc_theme_null(
chart = list(
backgroundColor = "transparent",
style = list(
fontFamily = "Roboto"
)
)
)
)
hctsne
data(iris)
head(iris, 4)
iris[, 1:4]
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)
print(ir.pca)
plot(ir.pca, type = "l")
summary(ir.pca)
predict(ir.pca, newdata = tail(log.ir, 2))
library(devtools)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
require(ggplot2)
theta <- seq(0,2*pi, length.out = 100)
theta
circle <- data.frame(x = cos(theta), y = sin(theta))
circle
plot(circle)
plot(circle)
p <- ggplot(circle, aes(x, y)) + geom_path()
p
loadings <- data.frame(ir.pca$rotation)
loadings <- data.frame(ir.pca$rotation,
.names = row.names(ir.pca$rotation))
loadings
ir.pca$rotation
p + geom_text(data = loadings,
mapping = aes(x = PC1, y = PC2, label = .names, colour = .names)) +
coord_fixed(ratio=1) + labs(x = "PC1", y = "PC2")
require(caret)
install.packages("caret")
require(caret)
trans = preProcess(iris[, 1:4],
method = c("BoxCox", "center", "scale", "pca"))
install.packages("e1071")
library(e1071)
trans = preProcess(iris[, 1:4],
method = c("BoxCox", "center", "scale", "pca"))
PC = predict(trans, iris[, 1:4])
head(PC, 3)
trans$rotation
args(sd)
search()
install.packages("ggvis")
library(ggvis)
ggbis(mtcars, ~wt, ~hp)
ggvis(mtcars, ~wt, ~hp)
f <- function() x
x <- 15
f()
x <- 20
f()
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
c <- 3
c(c = c)
letters <- c("a", "b", "c")
typeof(letters)
typeof(1:10)
length(letters)
x <- list("a", "b", 1:10)
length(x)
a <- list(
a = 1:3,
b = "a string",
c = pi,
d = list(-1, -5)
)
str(a[4])
str(a[[4]])
install.packages("XLConnect")
library("XLConnect")
install.packages("RMySQL")
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
dbname = "company",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
dbListTables(con)
dbReadTable(con, "employees")
res <- dbSendQuery(con, "SELECT * FROM products WHERE contract = 1")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 1)
print(chunk)
}
dbClearResult(res)
dbDisconnect(con)
print
print()
2+2
a <- "this is awesome"
a
df.car_spec_data <- read.csv(url("http://www.sharpsightlabs.com/wp-content/uploads/2015/01/auto-snout_car-specifications_COMBINED.txt"))
df.car_spec_data$year <- as.character(df.car_spec_data$year)
# BASIC THEME
theme.car_chart <-
theme(legend.position = "none") +
theme(plot.title = element_text(size=26, family="Trebuchet MS",
face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=18, family="Trebuchet MS",
face="bold", color="#666666")) +
theme(axis.title.y = element_text(angle=0))
# SCATTERPLOT THEME
theme.car_chart_SCATTER <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# HISTOGRAM THEME
theme.car_chart_HIST <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# SMALL MULTIPLE THEME
theme.car_chart_SMALLM <- theme.car_chart +
theme(panel.grid.minor = element_blank()) +
theme(strip.text.x = element_text(size=16, family="Trebuchet MS",
face="bold", color="#666666"))
library(ggplot2)
quartz()
ggplot(data=df.car_spec_data, aes(x=horsepower_bhp, y=top_speed_mph)) +
geom_point(alpha=.4, size=4, color="#880011") +
ggtitle("Horsepower vs. Top Speed") +
labs(x="Horsepower, bhp", y="Top Speed,\n mph") +
theme.car_chart_SCATTER
# BASIC THEME
theme.car_chart <-
theme(legend.position = "none") +
theme(plot.title = element_text(size=26, family="Trebuchet MS",
face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=18, family="Trebuchet MS",
face="bold", color="#666666")) +
theme(axis.title.y = element_text(angle=0))
# SCATTERPLOT THEME
theme.car_chart_SCATTER <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# HISTOGRAM THEME
theme.car_chart_HIST <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# SMALL MULTIPLE THEME
theme.car_chart_SMALLM <- theme.car_chart +
theme(panel.grid.minor = element_blank()) +
theme(strip.text.x = element_text(size=16, family="Trebuchet MS",
face="bold", color="#666666"))
library(ggplot2)
quartz()
ggplot(data=df.car_spec_data, aes(x=horsepower_bhp, y=top_speed_mph)) +
geom_point(alpha=.4, size=4, color="#880011") +
ggtitle("Horsepower vs. Top Speed") +
labs(x="Horsepower, bhp", y="Top Speed,\n mph") +
theme.car_chart_SCATTER
warnings()
ggplot(data=df.car_spec_data, aes(x=horsepower_bhp, y=top_speed_mph)) +
geom_point(alpha=.4, size=4, color="#880011") +
ggtitle("Horsepower vs. Top Speed") +
labs(x="Horsepower, bhp", y="Top Speed,\n mph") +
theme.car_chart_SCATTER
getwd()
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
dput(mtcars)
mtcars <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), .Names = c("mpg", "cyl", "disp", "hp",
"drat", "wt", "qsec", "vs", "am", "gear", "carb"), row.names = c("Mazda RX4",
"Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", "Hornet Sportabout",
"Valiant", "Duster 360", "Merc 240D", "Merc 230", "Merc 280",
"Merc 280C", "Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
mtcars
load(mpg)
mpg <- mpg
mpg
mpg <- ggplot2::mpg
mpg
?mpg
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
getwd()
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/plainHTML")
runApp()
library(shiny)
runApp()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/HTMLtemplates")
runApp()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/HTMLtemplates2")
runApp()
runApp()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4")
runApp()
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/shinySimpleLayoutFunction/")
runApp()
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/layoutFunctions_verticalLayout")
runApp()
runApp()
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/layoutFunctions_splitLayout")
runApp()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/complteLayoutFunctions/")
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/completeLayoutFunctions/")
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/doItYourself//")
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/combiningLayoutFunctions/")
runApp()
runApp()
runApp()
getwd()
setwd("/Users/marcelkropp/Dropbox/MYSELF/CODING/R/WebAppWithShiny_Beeley/Chapter_4/Gapminder_enhanced/")
getwd()
runApp()
install.packages("DT")
install.packages("DT")
library(DT)
getwd()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
quit()
